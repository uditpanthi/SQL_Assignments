Scenario: You are working as a database administrator for a fictional company named "TechShop," 
which sells electronic gadgets. TechShop maintains data related to their products, customers, and 
orders. Your task is to design and implement a database for TechShop based on the following 
requirements:
Database Tables:
1. Customers:
• CustomerID (Primary Key)
• FirstName
• LastName
• Email
• Phone
• Address
2. Products:
• ProductID (Primary Key)
• ProductName
• Description
• Price
3. Orders:
• OrderID (Primary Key)
• CustomerID (Foreign Key referencing Customers)
• OrderDate
• TotalAmount
4. OrderDetails:
• OrderDetailID (Primary Key)
• OrderID (Foreign Key referencing Orders)
• ProductID (Foreign Key referencing Products)
• Quantity
5. Inventory
• InventoryID (Primary Key)
• ProductID (Foreign Key referencing Products)
• QuantityInStock
• LastStockUpdate
Tasks:
1. Database Design (Normalization):
1. Create the database named "TechShop"
2. Define the schema for the Customers, Products, Orders, OrderDetails and Inventory tables 
based on the provided schema.
3. Perform the first three normal forms (1NF, 2NF, 3NF) analysis on the above tables. 
4. Create an ERD (Entity Relationship Diagram) for the database.
5. Create appropriate Primary Key and Foreign Key constraints for referential integrity.
2. Data Definition Language (DDL):
1. Write SQL scripts to create the mentioned tables with appropriate data types, constraints, and 
relationships. 
• Customers
• Products
• Orders
• OrderDetails 
• Inventory

3. Data Manipulation Language (DML):
a. Insert at least 10 sample records into each of the following tables.
• Customers
• Products
• Orders
• OrderDetails 
• Inventory
b. Write SQL queries for the following tasks: 
1. Write an SQL query to retrieve the names and emails of all customers. 
2. Write an SQL query to list all orders with their order dates and corresponding customer 
names.
. Write an SQL query to insert a new customer record into the "Customers" table. Include 
customer information such as name, email, and address.
4. Write an SQL query to update the prices of all electronic gadgets in the "Products" table by 
increasing them by 10%.
5. Write an SQL query to delete a specific order and its associated order details from the 
"Orders" and "OrderDetails" tables. Allow users to input the order ID as a parameter.
6. Write an SQL query to insert a new order into the "Orders" table. Include the customer ID, 
order date, and any other necessary information.
7. Write an SQL query to update the contact information (e.g., email and address) of a specific 
customer in the "Customers" table. Allow users to input the customer ID and new contact 
information.
8. Write an SQL query to recalculate and update the total cost of each order in the "Orders" 
table based on the prices and quantities in the "OrderDetails" table.
9. Write an SQL query to delete all orders and their associated order details for a specific 
customer from the "Orders" and "OrderDetails" tables. Allow users to input the customer ID 
as a parameter.
10. Write an SQL query to insert a new electronic gadget product into the "Products" table, 
including product name, category, price, and any other relevant details.
11. Write an SQL query to update the status of a specific order in the "Orders" table (e.g., from 
"Pending" to "Shipped"). Allow users to input the order ID and the new status.
12. Write an SQL query to calculate and update the number of orders placed by each customer 
in the "Customers" table based on the data in the "Orders" table.

# Aggregate Functions
1.Write an SQL query to find out which customers have not placed any orders.
2. Write an SQL query to find the total number of products available for sale. 
3. Write an SQL query to calculate the total revenue generated by TechShop. 
4. Write an SQL query to calculate the average quantity ordered for products in a specific category. 
Allow users to input the category name as a parameter.
5. Write an SQL query to calculate the total revenue generated by a specific customer. Allow users 
to input the customer ID as a parameter.
6. Write an SQL query to find the customers who have placed the most orders. List their names 
and the number of orders they've placed.
7. Write an SQL query to find the most popular product category, which is the one with the highest 
total quantity ordered across all orders.
8. Write an SQL query to find the customer who has spent the most money (highest total revenue) 
on electronic gadgets. List their name and total spending.
9. Write an SQL query to calculate the average order value (total revenue divided by the number of 
orders) for all customers.
10. Write an SQL query to find the total number of orders placed by each customer and list their 
names along with the order count

# Joins
Joins:
1. Write an SQL query to retrieve a list of all orders along with customer information (e.g., 
customer name) for each order.
2. Write an SQL query to find the total revenue generated by each electronic gadget product. 
Include the product name and the total revenue.
3. Write an SQL query to list all customers who have made at least one purchase. Include their 
names and contact information.
4. Write an SQL query to find the most popular electronic gadget, which is the one with the highest 
total quantity ordered. Include the product name and the total quantity ordered.
Write an SQL query to retrieve a list of electronic gadgets along with their corresponding 
categories.
6. Write an SQL query to calculate the average order value for each customer. Include the 
customer's name and their average order value.
7. Write an SQL query to find the order with the highest total revenue. Include the order ID, 
customer information, and the total revenue.
8. Write an SQL query to list electronic gadgets and the number of times each product has been 
ordered.
9. Write an SQL query to find customers who have purchased a specific electronic gadget product. 
Allow users to input the product name as a parameter.
10. Write an SQL query to calculate the total revenue generated by all orders placed within a 
specific time period. Allow users to input the start and end dates as parameters.